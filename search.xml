<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[android UI自定义控件的形状]]></title>
    <url>%2F2019%2F07%2F31%2Fandroid-ui-button-md%2F</url>
    <content type="text"><![CDATA[android 自带生成的按钮是一个长方形的浅灰色的，这么丑的按钮，我想在实际中应该不会用吧。那么我们有没有一些好的按钮可用尼？其实我们完全可以根据自己的需求来设计自己的按钮。xml文件中提供了一个shape可以根据自己的需求来设计。shape提供了rectangle, oval, line , ring. 在res-&gt;drawable-&gt;右键new Drawable resource file新建文件。 矩形rectangle矩形我们可以设置圆角，填充颜色，只有边框，按键不不按键下显示不同的颜色。 带有圆角的矩形。solid 是填充颜色， corners 是设置圆角的。可以全部一起设置用radius属性，也可以分别给四个角设置。 12345678910&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt; &lt;solid android:color=&quot;#48CFAD&quot;/&gt; &lt;corners android:bottomLeftRadius=&quot;20dp&quot; android:bottomRightRadius=&quot;20dp&quot; android:topLeftRadius=&quot;5dp&quot; android:topRightRadius=&quot;5dp&quot;/&gt;&lt;/shape&gt; 矩形边框。stroke可以设置边框的宽度和颜色， corners 同样可以设置圆角，用法同上。 12345678&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;rectangle&quot;&gt; &lt;stroke android:color=&quot;#FFFF33&quot; android:width=&quot;5dp&quot;/&gt; &lt;corners android:radius=&quot;5dp&quot;/&gt;&lt;/shape&gt; 设置按下和不按的时候显示不同的颜色。属性的设置用法同上，只是这里使用的是选择selector item 1234567891011121314&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;item android:state_pressed=&quot;true&quot;&gt; &lt;shape&gt; &lt;solid android:color=&quot;#003314&quot;/&gt; &lt;corners android:radius=&quot;10dp&quot;/&gt; &lt;/shape&gt; &lt;/item&gt; &lt;item android:state_pressed=&quot;false&quot;&gt; &lt;shape&gt; &lt;solid android:color=&quot;#BBFFD6&quot;/&gt; &lt;corners android:radius=&quot;10dp&quot;/&gt; &lt;/shape&gt; &lt;/item&gt;&lt;/selector&gt; 椭圆 oval 填充颜色 12345678910&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt; &lt;!--填充颜色--&gt; &lt;solid android:color=&quot;#0099FF&quot;/&gt; &lt;!--宽和高，一样的时候就是一个圆--&gt; &lt;size android:width=&quot;100dp&quot; android:height=&quot;50dp&quot;&gt;&lt;/size&gt;&lt;/shape&gt; 渐变色 1234567891011121314&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot;&gt; &lt;!--宽和高，一样的时候就是一个圆--&gt; &lt;size android:width=&quot;100dp&quot; android:height=&quot;100dp&quot;&gt;&lt;/size&gt; &lt;gradient android:centerX=&quot;0.5&quot; android:centerY=&quot;0.5&quot; android:type=&quot;sweep&quot; android:startColor=&quot;#F8FFDD&quot; android:endColor=&quot;#EE0000&quot;&gt;&lt;/gradient&gt;&lt;/shape&gt; android:centerX：表示渐变的X轴起始位置，范围0-1，0.5表示圆心。android:centerY：表示渐变的Y轴起始位置，范围0-1，0.5表示圆心。android:type：渐变类型，有三种分别是： linear 线性渐变，默认的渐变类型 radial 放射渐变，设置该项时，android:gradientRadius也必须设置 sweep 扫描性渐变 环ring12345678910111213&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;ring&quot; android:useLevel=&quot;false&quot; android:thickness=&quot;10dp&quot;&gt; &lt;!--useLevel需要设置为false--&gt; &lt;solid android:color=&quot;@color/colorAccent&quot;&gt;&lt;/solid&gt; &lt;gradient android:startColor=&quot;@color/colorAccent&quot; android:endColor=&quot;@color/colorPrimary&quot; android:type=&quot;sweep&quot;&gt;&lt;/gradient&gt;&lt;/shape&gt;]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Android开发第一行代码]]></title>
    <url>%2F2019%2F07%2F29%2Farticle%2F</url>
    <content type="text"><![CDATA[2019年7月29日，从头开始学习android开发，同时也回归自己的博客，希望自己坚持写下去。]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2F2019%2F07%2F28%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[一级标题二级标题一共有6级标题，几级标题就有几个#号，在最后一个#之后要有一个空格，再输入标题。 字体 加粗 加粗的字体在两边加两个星号, 如我的世界。 斜体 斜体字在两边加一个星号。 我的世界 斜体加粗 斜体加粗使用三个星号， 我的世界 删除 删除使用两个线， ~~我的世界引用引用在引用的文字前面加&gt;,可以嵌套引用&gt;&gt;或&gt;&gt;&gt; 平凡的世界 一本值得拥有的书。 分割线 使用三个或三个以上的*or-我的世界 图片超链接百度 列表无序列表使用-+星号中的任意一种 我的世界 平凡的世界 好日子 有序列表数字加点 我们的世界观 自我概念 认同管理 嵌套列表上一级和下一级之间空三个空格 我的世界 作者 时间 出版社 平凡的世界 作者 出版时间 表格 姓名 年龄 毕业学校 Edward 21 XD xiaorong 22 XD 代码单行代码用烦引号括起来print (&quot;Hello World !&quot;)代码块使用三个单引号号括起来12345678#include&lt;stdio.h&gt;int main()&#123; printf(&quot;Hello World !&quot;); return 0;&#125; 流程图12345678st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;]]></content>
  </entry>
  <entry>
    <title><![CDATA[C语言中的移位操作]]></title>
    <url>%2F2019%2F05%2F12%2Fshift_bit%2F</url>
    <content type="text"><![CDATA[123 int i = 0xcffffff3;printf(&quot;ret1 = %x\n&quot;, 0xcffffff3&gt;&gt;2);printf(&quot;ret2 = %x\n&quot;, i&gt;&gt;2); 这里得到的结果为：12ret1 = 33fffffcret2 = f3fffffc cffffff3对应的二进制位： 1100 1111 1111 1111 1111 1111 1111 0011用常量表示的右移位２： 0011 0011 1111 1111 1111 1111 1111 1100 =0x33fffffc如果是变量表示则ｉ位无符号数， 向右移位补位用１： 1111 0011 1111 1111 1111 1111 1111 1100 = 0xf3fffffc即有符号数不管右移几位前面都是补１。 汉明重量 从异或的真值表可以看出，不管是0还是1，和0做异或保持原值不变，和1做异或得到原值的相反值。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java面试题]]></title>
    <url>%2F2019%2F03%2F05%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[java 传参是值传递还是引用传递？ 一个方法不能修改一个基本数据类型的参数（数值型和布尔型）。 一个方法可以修改一个引用所指向的对象状态，但这仍然是按值调用而非引用调用。 == 与equals() 的区别 ==： 判断的是两个对象的地址是不是相等。即判断两个对象是不是同一个对象。 基本类型使用== 比较的是值 引用类型比较的内存地址。 equals(): 判断两个对象是否相等，分为两种情况。 1. 类没有重写equals()方法，则比较的是该类的两个对象。相当于“==”。 2. 重写了equals()方法，则比较的是两个对象的内容是否相同。 final finally finalize 的区别1. final 是“最终”的意思，可以用来修饰类、方法、变量 * 如果修饰类，则表示该类不能狗本继承。 * 修饰方法，表示该方法不能够被重写。 * 修饰变量，则变成一个常量，不能被修改。 2. finally 是异常处理的一部分，一般都会被执行，只有当在finally之前出项退出jvm时才不会被执行。 3. finalize 是Object的垃圾回收机制， gc在调用之前调用finalize()方法 java的基本数据类型 |基本数据类型|对应的包装类(java.long包下)| |：————：|：————：| |short| Short| |int | Integer| |byte|Byte| |long|Long| |float|Float| |double|Double| |boolean|Boolean| |char| Character| String\StringBuffer\StringBuilder的区别，StringBuffer\StringBuilder哪一个是线程安全的？可变性String 类中使用了final 关键字字符数组: **private final char value[]**，所以String对象是不可变的，而StringBuffer与StringBuilder都继承了各自得AbstractStringBuilder.内部定义得是**char value[]**,两个对象可变。 线程安全性String类型是可不变得所以是线程安全的。 StringBuffer加了同步锁，所以是线程安全的。 StringBuilder没有加同步锁，所以是线程不安全的。 性能 String 每次创建一个对象都要把引用对象指向新的对象。StringBuffer和StringBuilder则可以在本身的基础上改变，性能上StringBuilder的性能更好，但是却是线程不安全的，所以我们一般都是使用StringBuffer. hashCode() 与equals() hashCode()获得的是hash值，也叫散列值，int类型，表示的是否是同一个引用对象。 equals()方法是比较两个对象是否是同一个对象。 实现一个线程有哪些方法？ Runnable和Callable有什么区别？1. 1 继承Thread类 需要重写run()方法 getName() 获取当前运行的线程的名字Thread.currentThread.getName() 2. 2 实现Runnable接口 需要重写run()方法，调用时要用Thread封装。 3. 3 实现Callable接口需要实现call（）方法， 需要使用FutureTask封装实现类**FutureTask ftk=new FutureTask(CallableDemo)** 阻塞和挂起有什么区别？如何实现一个线程同步？如何使5个线程公平执行？hashCode()和equals()的有什么不同？死锁的概念，死锁的条件，现实生活中有那些死锁的案例，如何写一个程序？死锁1. 1、死锁是由于两个或两个以上的进程竞争资源或者由于彼此相互通信而造成的一种阻塞状态，若无外力条件，则不能够运行下去。 2. 2、现实生活中，如交通十字路口的情况，相向要过桥的两个人等。 3. 3、死锁与阻塞的区别：死锁一定涉及到多个进程，而阻塞可以只有一个，死锁的解除需要外力，阻塞当条件满足后就会回到就绪态。 进程的状态： 就绪态，运行态，阻塞态，完成态，挂起。 4. 4、死锁产生的必要条件： * 互斥条件： 当一个进程正在使用独占资源时，如果另一个进程要申请则必须等待。 * 请求与保持： 进程站有资源，但是还没有释放就去申请其他资源。 * 不可剥夺： 当进程获得资源之后，不可以被剥夺，只能自己释放。 * 环路等待： 请求资源构成一个环路，互相等待对方释放资源。 死锁的解决方法1. 1 死锁预防 破坏四个条件中的一个，条件比较严格，会降低系统的资源使用率和吞吐量。 2. 2 死锁避免 对分配资源动态检查，只有当不会发生死锁时才分配。 3. 3 死锁检查和解除 Object有那些方法？ Object类是所有类的父类，所有的类包括arrays, 实现该类方法的所有类。 protected Object clone() Creates and returns a copy of this object. boolean equals(Object obj) Indicates whether some other object is “equal to” this one. protected void finalize() Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Class&lt;?&gt; getClass() Returns the runtime class of this Object. int hashCode() Returns a hash code value for the object. void notify() Wakes up a single thread that is waiting on this object’s monitor. void notifyAll() Wakes up all threads that are waiting on this object’s monitor. String toString() Returns a string representation of the object. void wait() Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. void wait(long timeout) Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed. void wait(long timeout, int nanos) Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java基础总结]]></title>
    <url>%2F2019%2F02%2F26%2FfundamentsOFJava%2F</url>
    <content type="text"><![CDATA[static如果某个成员变量被所有对象共享，则就用static修饰static的特点： 优先于对象存在。 随着类的加载而加载。 被所有对象共享。 可以直接用类名访问。 静态方法的注意事项： 静态方法没有this 静态只能访问静态 非静态可以访问静态也可以访问非静态。 主函数public static void main(String[] args) {}public: mian 被jvm调用，所以权限必须足够大。static: main被jvm调用，为了方便不用创建对象，可以直接用类名调用。void: 返回值为空， 因为我们把结果返回给jvm没有意义。main: 主函数入口，习惯用mainString[] args: 字符数组，用于存储早期命令行的参数。 JavaBean1、封装 隐藏实现细节，只提供一个公共的访问接口。 类、方法就是封装的体现。 private 可以修饰成员（成员变量、成员方法、构造方法） 被private修饰的成员只能在本类中使用 2、 公共的set/get方法 构造方法 作用： 创建对象，对对象的内容进行初始化 格式： 方法名与类名相同，方法没有返回值，没有返回类型。 不屑构造方法，系统默认提供一个无参构造方法，给了构造方法，系统就不提供。 this关键字 this代表当前的类的对象，谁调用就代表谁。 应用场景： 解决局部变量和成员变量同名的问题；用于构造函数的调用，this必须放在第一句。 new 一个对象做了什么Person p = new Person();在内存中做了什么？ 通过类加载器把Person.class加载到内存中。 在栈内存中为p变量开辟一个空间。 在堆内存中， 为Person对象开辟空间。 对对象进行默认初始化。 对对象的成员进行显示初始化（string为null, int为0…） 假设有构造代码块则执行构造代码块，没有就执行构造方法对成员变量进行初始化。 到此对象初始化完毕。 把对象中的堆内存的地址给变量p. 方法重写当父类的方法不能满足子类的方法时，子类可以重写该方法。方法名必须与父类的相同，参数列表必须相同。返回类型可以不同，私有方法不可以重写。静态只能静态重写。 如何自己实现过一个四舍五入： 加0.5取整 (int)(num + 0.5) 代码块1 、 局部代码块局部代码块位于成员方法中，限定变量的生命周期，提高效率。2 、构造代码块位于构造方法处，提取各构造方法共同的部分，每次创建对象都会执行一次。3、 静态代码块，位于构造方法处静态代码块对资源初始化，只执行一次。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java中OOP的三大特性之一： 多态]]></title>
    <url>%2F2019%2F01%2F12%2Fjava1%2F</url>
    <content type="text"><![CDATA[多态多态：同一个对象，在不同的时刻表现出不同的状态，父类的引用指向子类 多态的前提 要有继承的关系。 要有方法的重写。 要有父类引用指向子类对象。注意： 没有方法的重写的多态是没有意义的 多态中成员的关系 成员变量 ： 编译要看左边，左边没有就报错，运行看左边。 成员方法： 编译看左边，左边没有就报错，运行看右边。注意： 是因为方法有重写，变量没有重写。 弊端： 父类不能使用子类的功能。多态的好处: 提高程序的可维护性和扩展性。 多态的表现形式 具体类多态 抽象类多态 接口多态 抽象类型（abstract）如何一个方法只有方法声明，没有方法体，那么这个方法是不是具体的，是抽象的，使用关键字： abstract, 在一个类中抽象方法是没有意义的，将来如果有一个类继承这个类，是要必须重写该方法。如果一个类中有抽象方法，则该类必须定义为抽象类。 抽象类的定义123abstract class Demo &#123; public abstract void show(); &#125; 作用： 强制子类必须完成某些功能。 抽象类的特点 抽象方法必须有abstract修饰： 抽象方法所在的类肯定是抽象类。 抽象类中不一定有抽象方法。 抽象类不能被实例化， 不能有new 创建。 抽象类用其子类实例化。 子类继承父类，要么子类是抽象类，要么子类重写父类的抽象方法。 抽象类中： 成员方法：既可以是常量，也可以是变量 成员方法：可以是抽象的，也可以是一般的方法 构造方法： 有，方便子类访问父类的数据进行初始化。 接口interface接口的定义和实现interface 接口名 { } class 类名 implements 接口名 { //类实现接口 } 接口定义的特点 接口用interface进行定义。 一个类实现接口用implements实现。 接口成员的特点 成员变量： 接口中只有常量 默认 public static final 构造方法: 没有构造方法 成员方法： 接口中只有抽象方法 默认为abstract (推荐写的时候不上默认的内容)注：接口中可以使用多态。 接口的思想和原则接口的思想： 接口是对外暴露的规则。 接口是程序的功能的扩展 接口的现降低了耦合性 耦合性： 类一类的关联关系。 高内聚： 自己完成功能的能力。 程序： 低耦合 高内聚。 效率和安全,接口可以用来多实现。 单一原则： 接口在定义规范的时候，尽量单一规范。 接口的特点要么本身是抽象类，要么类实现接口的所有功能。 接口与类的关系类与接口的关系：实现关系，可以单实现，也可以多实现；它还可以在继承一个类的同时实现多个接口。 类与类的关系单一继承， 多层继承。 接口与接口继承关系，可以单一继承，也可以多继承。 接口与抽象类共性：都是不断抽象的东西不同点：A；抽象类或者接口的区别抽象类： 成员变量：既可以是常量也可以是变量 构造方法：有；用于子类访问父类的数据进行初始化 成员方法：可以是抽象的，也可以是一般的方法接口： 成员变量： 只有常量，默认为public static final 成员方法： 只有抽象方法 默认为public abstract 构造方法： 没有B: 类与接口的关系： 类与类的关系： 继承关系： 单继承，可以多层继承 类与接口的关系： 实现关系，可以单实现，也可以多实现 接口与接口的关系 继承关系，可以单继承，也可以多继承C: 本质特征（什么时候用抽象类， 什么时候用接口设计） 抽象类被继承体现的是： is a 的关系， 抽象定义是这个体系中的共性 接口实现的是like a 的关系，接口定义的是这个体系的扩展功能 面向对象思想 有那些类。 类的功能。 类间的关系。分析的时候，是按照从具体到抽象；实现的时候是按照从抽象到具体。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F30%2Fnew%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post"]]></content>
  </entry>
  <entry>
    <title><![CDATA[shell 编程学习]]></title>
    <url>%2F2018%2F12%2F30%2Fshell%2F</url>
    <content type="text"><![CDATA[shell 编程像其他编程语言一样，同样遵循一些语法，同时要了解shell和shell编程是有区别的。 First shell按照我们学习编程的经历，编的第一个程序都是打印Hello world, “你好，世界 ！”，所以我们也是从这个程序开始。12#!/bin/bashecho &apos;Hello world !&apos; compile/riun the programming在LINUX环境下编译 shell 程序有三种方法： 1 使用 chmod +x 赋予该程序的可执行权限，然后直接执行。 2 使用你使用的命令解释 bash执行， bash filename。 3 使用source, source filename, (或者使用 . 代替 source ) 通常情况下, 最方便的方式就是方式1, 通过方式1执行你需要在脚本第一行写好这段脚本由哪个解释器来解释, 而通过方式2来执行则没有这个限制, 写了也没用.除此之外方式1与方式2执行命令就没有区别了, 但方式3执行的方式与前两种都不同: 使用source执行shell脚本时, 不会创建子进程, 而是在父进程中直接执行! variable 变量在shell语言中同样有变量这一概念，但shell中的变量与其他语言中的变量又有区别： 1 在shell中变量只针对字符串这一概念 2 字符串的长度的限制 3 字符串也可以进行比较等各种操作用法：1variable_name=&quot;string&quot; #在“=”的两边不要有空格 注意: 在shell 程序中注释使用的是#，其后的语句在编译时会被忽略，注释只是为了方便自己和他人阅读程序，方便程序的维护。 变量分类 1 局部变量 2 全局变量 变量的使用使用变量的格式如下：在变量名前加上美元符$12name=&apos;Edward&apos;echo $name 当执行程序时打印出来的就是字符串Edward, 变量在写程序的时候带来了极大的方便。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux之正则表达式]]></title>
    <url>%2F2018%2F02%2F01%2FRE%2F</url>
    <content type="text"><![CDATA[正则表达式主要是用于字符串的匹配，属于模糊匹配，主要用于文本信息的筛选和处理。\包括基本正则和扩展正则。 正则表达式与通配符的区别：通配符（wtilcard）代表的是bash操作接口的一个功能，但正则表达式则是一种字符串处理的表达式。 特殊符号 特殊符号 代表的意义 [:alnum:] 代表英文大小写和数字 [:alpha:] 代表英文大小写 [:digit:] 代表数字 [:upper:] 代表大写字母 [[:lower:] 代表小写字母 shell正则grep123456789usage: grep [option] filename option: [acivn] -A -B a binary文件以TEXT文件方式查找 c 统计查找字符串的次数 i 忽略大小写 v 取反 n 打印行号 A after 同时匹配行后面的n行 B before 同时打印匹配行前的N行 -注-：grep命令是以行为单位进行数据的选取。 当用特殊符号表示时，用法如下：12grep -n &apos;[^[:lower:]]oo&apos; filename #匹配oo前面的字符不是小写字符grep -n &apos;[[:digit:]]&apos; filename #匹配含有数字的行 行首行尾的匹配^$ 123grep -n &apos;^the&apos; filename #匹配以the开头的行grep -n &apos;\.$&apos; filename #匹配以“.”结尾的行grep -n &apos;^$&apos; filename #匹配空白行 . 表示任意一个字符 表示重复*前面的字符0次或多次 {}限定连续字符的范围，表示{}前面的字符的n到m次1grep -n &apos;o\&#123;2,5\&#125;&apos; filename #匹配o出现2到5次的行 基础正则的表达式字符 RE字符 意义 ^world 以word开头的行 world$ 以word结尾的行 . 任意一个字符 [list] 匹配list中的任意一个字符 \ 转移字符，用来转移特殊的字符，如. \ $ ^ 等 [n1-n2] 匹配选取字符的范围，数字可用[0-9]或[:digit:]表示 [^] 取反 {} 连续字符的范围 grep -E = egrep 扩展正则表达式 egrep扩展正则表达式是基础正则表达式的加强|RE|意义||:–:|:–||+|重复一个或一个以上前面的re字符||？|0个或一个前面的re字符||||条件（or）||()|找出“组”字符串||（）+|多个重复组辨别| sed工具sed是一个管道命令，可以用来删除、替换、新增、选取特定的行等功能。 用法如下：123456789101112 sed [-nefr] &apos;动作&apos; n ： silent安静模式，一般同“p”一起用 e ： 直接在命令行模式上进行编辑 f ： 直接写如文件 -f filename i : 直接修改编辑的文件 动作说明： a : 新增 c : 替换 d ：删除 p ：打印 s ：替换 eg : 1,20s/old/new/g examples:删除/etc/passwd中的2-5行1nl /etc/passwd | sed &apos;2,5d&apos; 在第二行后面新增两行1nl /etc/passwd | sed &apos;2a fdjklsjdiofn......\n gasdiufhjksldfua.....&apos; 打印有2-5的行1nl /etc/passwd | sed -n &apos;2,5p&apos; 替换字符串1sed 2,5/old/new/g awk工具awk是把一行分成数个字段来处理的，格式如下：1awk &apos;条件1 &#123;动作&#125; 条件2 &#123;动作&#125; ......&apos; filename 在awk中$0,$1,$2…分别表示行，第一个字段，第二个字段。。。。awk内置变量|变量名称|代表的意义||:—:|:—||NF|每一段的字段数 ||NR|目前awk处理的第几行 ||FS|目前的分隔字符，默认为空格或tab键| awk的条件支持逻辑运算1234cat /etc/passwd | awk &apos;&#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\t&quot; $3&#125;&apos; #该处理的第一行的分隔符仍然是空格， 条件是从第二行起作用，要从第一行开始可以用BEGIN关键字 可以修改为如下则从第一行开始处理。 cat /etc/passwd | awk &apos;BEGIN&#123;FS=&quot;:&quot;&#125; $3 &lt; 10 &#123;print $1 &quot;\t&quot; $3&#125;&apos; 关键字还有END]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F01%2F18%2Fpython%2F</url>
    <content type="text"><![CDATA[title:pythonС??ё????????дì???Сд1231bs.capitalize()2bs[0].upper + s[1:].lower()3bs.title()]]></content>
  </entry>
  <entry>
    <title><![CDATA[统计统计文件的字符数]]></title>
    <url>%2F2017%2F09%2F07%2Fcountcharacter%2F</url>
    <content type="text"><![CDATA[注意： 统计文件中的字符数，其中空格算一个字符，空行占一个换行符（‘\n’）, 统计的时候可以用 if 语句去掉， 文件的结束不是以换行符‘\n’结束，而是以 EOF 结束 请求用户输入文件名统计文件的字符：123456789101112131415161718192021222324252627282930313233343536//filename: countcharacters.c //auther: wuxiaorong 2017/9/7#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main()&#123; char ch; FILE * fp; char name[41]; long count = 0; printf(&quot;Enter the file :&quot; ); scanf(&quot;%s&quot;, name); if((fp = fopen(name, &quot;r&quot;)) == NULL) &#123; printf(&quot;can&apos;t open this file !\n&quot;); EXIT_FAILURE;&#125; while((ch = getc(fp)) != EOF) &#123; if(ch == &apos;\n&apos; || ch == &apos; &apos;) continue; count++;&#125;if(fclose(fp) != 0 ) &#123; fprintf(stderr, &quot;something wrong !&quot;); EXIT_FAILURE;&#125;printf(&quot;this file has %ld characters !\n&quot;, count); return 0;&#125; 交互命令统计文件字符：123456789101112131415161718192021222324252627282930313233//standardIO.c using I/O#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt; // exit()int main(int argc, char * argv[])&#123; FILE *fp; int ch; long count = 0; if(argc != 2) &#123; printf(&quot;Usage: %s filename\n&quot;, argv[0]); // exit(1); EXIT_FAILURE; &#125; if((fp = fopen(argv[1], &quot;r&quot;)) == NULL) &#123; printf(&quot;can&apos;t open this file&quot;); // exit(1); EXIT_FAILURE; &#125; while((ch = getc(fp)) != EOF) &#123; if(ch == &apos;\n&apos; || ch == &apos; &apos;) continue; // putchar(ch); count++; &#125; fclose(fp); printf(&quot;this file %s has %ld characters\n&quot;, argv[0], count); return 0;&#125; 12gcc filename.c./a.out data.txt]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux 中的 进程管理函数 forl()]]></title>
    <url>%2F2017%2F09%2F06%2Ffork%2F</url>
    <content type="text"><![CDATA[fork入门fork() 函数通过系统创建一个与原来进程几乎相同的进程，两个进程可以完成相同的事，但初始参数或传递的变量不同，两个进程也可以做不同的事。 fork()函数调用一次，返回两次，有三种不同的返回值： 1.1 在父进程中， fork返回新创建的进程的ID 1.2 在子进程中，fork返回0 1.3 如果出错，fork返回一个负值 在fork函数执行完毕后，如果创建进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中返回新创建子进程的进程ID。我们可以通过fork返回值来判断当前进程是子进程还是父进程。 引用一位网友的话来解释fpid的值为什么在父子进程中不同。“其实就相当于链表，进程形成了链表，父进程的fpid(p 意味point)指向子进程的进程id, 因为子进程没有子进程，所以其fpid为0. fork出错可能有两种原因： 1）当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。2）系统内存不足，这时errno的值被设置为ENOMEM。 创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略每个进程都有一个独特（互不相同）的进程标识符（process ID），可以通过getpid（）函数获得，还有一个记录父进程pid的变量，可以通过getppid（）函数获得变量的值。fork执行完毕后，出现两个进程，]]></content>
  </entry>
  <entry>
    <title><![CDATA[shell script 的执行方式和区别]]></title>
    <url>%2F2017%2F08%2F05%2Fshell_perform%2F</url>
    <content type="text"><![CDATA[以前在写shell编程的时候提到过shell脚本的执行方式，由于当时水平有限，有一些问题可能没有说清楚。正好我最近在学习shell script ，正好完善一下以前不懂得地方。前面的文章[shell编程]: http://wuxiaorong.coding.me/2017/05/08/shell/ 执行方式 主要有三种执行方式，而且每一种的执行方式是有区别的，造成的结果也相同。 利用直接执行的方式来执行shell script 当使用直接执行的方式执行时，必须的条件是脚本要有执行权限，且在脚本中要指明用什么shell执行，也就是脚本开头的那一行#!/bin/bash,我这里使用的是bash, 当然你也可以使用其他的shell。执行方式： 12chmod +x filename.sh ./filename.sh 使用shell环境执行这种方式是直接调用使用shell执行，执行方式： 1bash filename.sh 利用source执行，在父进程中执行（. 与source 有相同的功能），执行方式; 12source filename.sh . filename.sh 区别 这三种执行方式的区别主要是执行的环境不同，前两中的执行环境是在子进程中执行，后一种是在父进程中执行。或许说得你迷迷糊糊的，当时我也是如此，其实我们用图可以更好地表达： 问题 当时我是用source执行脚本是会退出终端，一开始不知道怎么回事，经过上网查，发现我的脚本中有一行exit 0,当在父进程中执行时到exit 0 时，会退出父进程的终端。在子进程中执行时也会退出，只不过还有父进程的终端，所以终端还在。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 中 HISTSIZE 、 HISTFILESIZE 、HISTTIMEFORMAT 的设置]]></title>
    <url>%2F2017%2F07%2F16%2Fhistsize_bashrc%2F</url>
    <content type="text"><![CDATA[配置文件在./.bashrc HISTSIZE 当你的bash环境在运行时能够储存的命令的行数（默认为1000），这些命令只有当你注销后才能保存到历史文件./.bash_history中 HISTFILESIZE（默认为2000） 指历史文件（./.bash_history）中能够存储的命令的夯实 HISTTIMEFORMAT 设置显示格式，调用history时也要显示时间戳]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于excel文件的密码破解]]></title>
    <url>%2F2017%2F07%2F06%2Fbroken_passwd_excel%2F</url>
    <content type="text"><![CDATA[前言： 我在网上查了一下，发现破解的方法有两种，一种是使用excel的定义宏破解，另一种是用软件破解。我尝试了用网上的方法使用宏破解，但是都不成功，所以我选择了使用软件破解，使用的软件为 Advanced Office Passord Recovery。 网盘下载地址：链接：https://pan.baidu.com/s/1eS6BJLw 密码: cgym 方法如下： 下载破解软件从网盘下载好软件后可以存放在任何位置（我先放在桌面）： 安装软件双击上面的软件（.exe）,出现下面的安装界面，选择默认安装就可以了，选择一个容易找到的安装目录，方便不用的时候可以直接删掉：等待。。。。。当出现下面的界面时，把设置999网址导航前面的对勾去掉，不然它会给你安装一些附加的软件，只保留运行软件：到此安装就完成了： 破解excel文件的密码打开桌面的 Advanced Office Password Recovery。点击 打开文件 导入你要破解的excel文件，出现下面的界面就有了文件对应的密码； 输入密码打开文件打开excel文件的信息，点击取消保护，弹出密码对话框，填入上面破解的密码就可以编辑文件了： 永久删除软件打开安装软件的目录，点击Uninst.exe就可以删除软件了]]></content>
  </entry>
  <entry>
    <title><![CDATA[不用安装各种软件，而且可以翻墙的工具]]></title>
    <url>%2F2017%2F07%2F05%2Fuzerme%2F</url>
    <content type="text"><![CDATA[网站地址：云端超级运用空间https://uzer.me 首先我们先来介绍一下它的一些基本情况：uzer.me超级云端应用空间给你一种全新的软件运用方式，它提供的所有软件浏览器都是免安装不占用本地内存的，还提供了实时分享，与他人协作的功能。更为特别的是该网站还是一个翻墙的工具，在这里你可以google查资料，还可以上youtube看视屏，看mv， 听歌。它就是一个云端电脑，可以释放自己的PC的内存。在本人看来，你值得知道并了解使用这个软件。接下来我就简单的介绍一下这个这个网站的使用。 开始之前： 首先你要在你本地的浏览器中登入网站云端超级运用空间，注册一个账号，这里可以用手机或则邮箱注册。 登录运用： 注册完之后登录，你就可以看到主页面上有很多的软件,主要分为五个部分：办公软件，设计绘图，浏览器，办公效率，娱乐休闲。任何一个软件都是在线使用的，当你完成后可以保存在网上，也可以保存在本地。还有一个特别的是你可以与他人协作，可以实时交流完成工作。可以说是非常使用的一个网站：主页面如下图： 翻墙工具： 我个人觉得这个网站还有一个特别的地方是可以翻墙，他不像其他的翻墙工具需要代理服务器，在这里你可以直接翻墙上google,youtube等，无论是用来查资料，还是用来看视频、听歌学英语都是很方便的。使用方法也很简单：直接打开浏览器中的Firefox或者Chrome都可以，然后就和我们平时使用浏览器的方法一样了，输入网址你就可以看看外面的世界了： 就是这么方便，尽情的使用吧。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Linux命令下打包压缩文件]]></title>
    <url>%2F2017%2F06%2F19%2Flinux_tar%2F</url>
    <content type="text"><![CDATA[我们都知道在网络上传文件的时候都喜欢先把文件打包压缩，压缩可以使文件瘦身（变小）便于传输，在windows系统中我们都喜欢使用winRAR软件压缩文件，不过这个软件 可是要收费的哦。然而，在Linux系统中的压缩软件可都是免费的，听到是免费的是不是有点小激动，虽然是免费的，不过你得先学会才行，下面是我学习Linux下 压缩与解压缩的笔记。 什么是打包压缩 打包: 打包是指把多个文件打包成一个文件 压缩：压缩简单的说就是为一个文件瘦身，使文件变小便于传输 Linux命令下打包压缩文件linux系统下有很多有用的压缩命令，比如 compress、 gzip 、 bzip 、 tar， 接下来我会一一介绍它们的用法 开始详细介绍之前，我们先来介绍一下Linux的环境中，压缩文件的扩展名，以及它们的压缩程序：123456*.Z: compress程序压缩的文件*.gz: gzip程序压缩的文件*.bz2 bzip2程序压缩的文件*.tar tar程序打包的文件，并没有压缩*.tar.gz tar程序打包后，由gzip程序压缩*.tar.bz2 tar程序打包后，由bzip2程序压缩 compresscompress 目前只存在一些老的UNIX系统中，compress程序压缩大的文件的后缀为“ .Z ”, 现在都不用了，因为gzip可以解压 .Z 压缩包，而compress程序不可以解压其他的文件，所以i这里我们只是了解一下，感兴趣的话也可以自己去安装这个程序尝试用一下，不感兴趣的可以直接跳过这一部分。安装compress程序：(我的Linux环境为 Ubuntu)1sudo apt-get install ncompress Usage:12345compress [option] filename or directoryoption: -v -c -r-r: 连同目录下的文件一起压缩-c: 把压缩的数据打印到屏幕上，但不压缩成压缩包，如果要压缩成压缩包则使用输出重定向 compress -c filename &gt; filename.Z-v: 压缩时显示压缩信息 注意: 此程序压缩时是针对一个文件或一个目录，默认情况下在压缩时会删除原来的文件。 解压：1uncompress filename.Z 同样的，在解压后默认也会删除.Z 文件 gzip zcatgzip是目前用的比较多的压缩软件，它可以打开compress, zip, gzip 等软件压缩的文件，使用上同compress程序压缩文件很相似，gzip压缩的文件的后缀是：.gz ,下面来看一下它的用法：123456789option: -v -c -d -t -c , -v 的用法同compress-d: 解压的参数-t: 检查一个压缩文件的一致性，看看文件有没有错误**Examples**将 ~/newfile 用gzip压缩，然后再解压压缩：gzip -v newfile解压：gzip -d newfile.gz 注意：gzip 压缩和解压都会删除相应原来的文件。当你压缩的是一个文本文件时，你可以用 zcat 查看文件的内容。 bzip2 bzcatbzip2 的压缩效果比gzip的好，压缩的文件的后缀名为 .bz2, 用法同gzip的基本相同： bzip2 [option] filename option: -cdkzv -c,-d,-v: 同上面的gzip的用法 -k： 保留原文件，而不会删除原始文件 -z:压缩的参数 tar 打包软件tar软件起初只是一个打包的软件，并不能压缩文件，所以得先打包然后再压缩，不过其实大多数人是比较懒的，于是聪明的程序猿就把gzip, bzip2软件加入到了tar软件中，tar软件的打包压缩功能比较多，这里我们只了解比较常用的几个功能，其他的功能，你们可以给这个软件找一个男人看一下（man tar）: tar [option] filename[*] option: -c -f -v -z -j -t -x -c: 新建打包的文件，与-f 搭配用，需要指明打包的文件名,后缀名.tar -t: 查看打包的文件中有哪些文件，主要是查看文件名 -j: 通过bzip2程序打包压缩/解压，此时文件名最好为.tar.bz2 -z：通过gzip打包压缩/解压 ，此时文件名为.tar.gz -x: 解压文件时用 解压单一文件：当一个压缩文件中有很多文件，但我们只解压其中的一个文件，可以这样做： tar -jtv -f filename.tar.bz2 | grep ‘目标文件’ 找到文件解压： tar -jxv -f filename.tar.bz2 待解压文件]]></content>
  </entry>
  <entry>
    <title><![CDATA[像计算机科学家一样的思考]]></title>
    <url>%2F2017%2F05%2F12%2Fc%2B%2Bprogramming%2F</url>
    <content type="text"><![CDATA[编程语言这里使用的编程语言是C++，C++以及其他的C、Pascal等语言都是属于高级语言，有高级语言也就相对的有低级语言 ，低级语言也称为汇编语言或者机器语言，而计算机只能识别低级语言，那为什么我们还要学习高级语言。首先高级语言便于 编写，且有较好的移植性，但它也有缺点，就是高级语言必须经过解释或者编译之后才能被计算机识别。 解释是解释一条语句执行一条语句，而编译是把所有的程序语句都编译成机器码之后再一起执行。 高级语言写的代码称为源代码，而经过解释和编译后的程序称为目标代码或可执行代码。 程序 程序：一组计算机指令序列，每一种语言都有如下几种功能：输入、输出、数学运算、测试、重复 调试 编写程序时难免会出现错误，而发现错误的过程就是调试，debugging 编译时错误编译器只能编译正确的程序，当出现语法错误时就会编译失败。 运行时错误 程序能正常执行，但是得出的结果与预期的结果不对，这时就需要调试，以便得出想要的结果。 第一个程序 打印Hello, World :1234567#include&lt;iostream&gt;using namespace;int main()&#123; cout &lt;&lt; &quot;Hello,World&quot; &lt;&lt;endl; return 0;&#125;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F05%2F07%2Ftest1%2F</url>
    <content type="text"><![CDATA[Firstsecondthirdforthfifthsixth content testtest NAME SCORE FIRST 89 SEC Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 #include&lt;stdio.h&gt; int main() { printf(&quot;hello world !&quot;); return 0; }@(help)[first|second]]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AutoLisp]]></title>
    <url>%2F2017%2F05%2F02%2FAutoLisp%2F</url>
    <content type="text"><![CDATA[关于AutoLisp 学习笔记1、pline 命令 当时用pline 命令画圆弧的时候，要注意是以逆时针开始画圆顺序为：point(开始的点) —————&gt; 圆心——————&gt;另一个端点， 回车完成。]]></content>
  </entry>
  <entry>
    <title><![CDATA[usage of string]]></title>
    <url>%2F2017%2F04%2F11%2Fstring%2F</url>
    <content type="text"><![CDATA[字符串的输入1、puts() 函数 只接受一个参数，即字符串的首地址，然后输出字符串，使用puts（）函数输出是单行显示，因为puts()显示字符串是会自动在其后添加一个换行符 2、fputs()函数 fputs（）函数需要添加第二个参数，企鹅不会自动添加换行符。 3、printf()函数 格式化输出函数。]]></content>
  </entry>
  <entry>
    <title><![CDATA[民谣真的变味了吗]]></title>
    <url>%2F2017%2F04%2F06%2Fminyao%2F</url>
    <content type="text"><![CDATA[其实我并不是一个喜欢写东西的人，有时候仅仅是在手机上记下自己的一些小想法，可是最近和朋友聊了一两句关于民谣的事，我发现她对民谣的还是很了解的，不过她说现在开始不喜欢民谣啦，我想原因可能大家都能猜到的，这里我就不多说了，在这里我只是想谈谈我的想法。 民谣越来越火，为什么那些原来喜欢民谣的人开始不喜欢民谣了 对于这个问题，我刚好在网上看到了一张图片，就先上图啦 我不知道你们是否同意上面对这种现象的分析，不过我觉的还是有一定的道理的。的确，民谣这几年在中国是越来越火了，开始从小众音乐变成主流音乐，被越来越多的人接受，可是有些人开始担心当民谣歌手出名后，他们为了迎合大众的喜好，为了获得利益，他们的音乐是为了商业目的。我不敢说这种担心是没有必要的，或许会有极少的民谣歌手会这样做，但我绝对相信大多数歌手是不会这样做的，因为他们并不是为了生存而去搞音乐，他们是真的爱音乐，可以说音乐就是他们人生的一部分。他们的每一首歌唱的不仅仅是他们对于生活、理想的感悟，同时也寄托我们这些热爱着民谣的心声。正是应为如此，相信虽然他们现在变得出名了，但是他们的音乐是没有变的。 我为什么喜欢民谣在我看来，每一首歌都在讲述一个故事，而每一个故事都是感人的，而且激励着我们前进，这就是为什么我会喜欢带上耳机，安静的听着他们的声音，高晓松的《同桌的你》，老狼的《恋恋风尘》，好妹妹乐队的《你究竟有几个好妹妹》，赵雷的《成都》、《理想》、《南方姑娘》等，每一首歌都在自己的歌单里不知道循环听了多少遍。无论时间如何带走青春，现实怎样吞噬浪漫，民谣的味道依旧。我们不会因为现实的冷漠而放弃自己的理想，我们只会更加坚信理想是不会向现实低头的，民谣不变，他让你变成真实的自己，去深爱着别人 让我在看你一眼 星空和黑夜 西去而盘旋的飞鸟 我们生来就是孤独 —《梵高先生》 青春又醉倒在 籍籍无名的杯 靠嘻笑来虚度 聚散得慷慨 辗转却去不到 对的站台 —《理想三旬》 理想永远年轻 你让我倔强的反抗命运 你让我变的苍白 却依然天真的相信花儿会再次的盛开 —《理想》 好电台推荐 我收听民谣主要是在网易云音乐上的主播电台下的音乐故事，里面有几个好的电台，音乐咖啡屋、淘漉音乐、民谣在路上， 我个人觉得还是很不错的，希望你也喜欢。]]></content>
  </entry>
  <entry>
    <title><![CDATA[add user]]></title>
    <url>%2F2017%2F03%2F26%2Fubuntu%2F</url>
    <content type="text"><![CDATA[在ubuntu中添加用户， 关于 useradd 和 adduser 的用法和区别。 adduser首先我们来看看如何用 adduser 添加用户： 1234567891011121314添加用户 ‘username’ ...添加新用户组 添加新用户到新用户组复制用户文件输入密码：再输入一次密码：密码设置成功修改用户的信息输入新的，或者按回车键默认 全名： 房间号： 工作号码： 其他的：填入的信息是否正确？ ###useradd使用useradd来创建用户 1useradd username 使用useradd需要自己去配置相关信息， 如下：（1） -d： 指定用户的主目录（2） -m： 如果存在不再创建，但是此目录并不属于新创建用户；如果主目录不存在，则强制创建； -m和-d一块使用。（3） -s： 指定用户登录时的shell版本（4） -M： 不创建主目录 区别 adduser会自动配置相关信息，并且在 /home目录下创建用户目录，而useradd则不会创建。使用以下命令可以查看：1ls /home passwdpasswd给用户添加密码和修改，与usermod 的区别在于 usermod 修改密码后是明码，所以最好不要用usermod 修改密码，在/etc/shadow 中可以看到密码。 userdeluserdel删除用户，只有一个参数 -r ，表示同时删除 /home 目录下的相关文件]]></content>
  </entry>
  <entry>
    <title><![CDATA[c language point]]></title>
    <url>%2F2017%2F03%2F22%2Fc_record%2F</url>
    <content type="text"><![CDATA[关于C语言中的执行顺序12int a=9:printf(″%d,%d\n″,a , a++)； 执行的结果是110 9 原因：答案为10，,9 不要惊慌！ 原因在于计算机会先算后者a++，即第二个数为9此后a为10，再算第一个数为10，最后输出10,9你可能要问为什么先算第二个？原因在于：数据在栈结构中，像弹夹一样，先进后出，压站顺序呢由左往右，所以先算第二个！另外悄悄告诉你：这个顺序也不是绝度的，是由编译器定的！ C语言二级考试细节 数组名做为实参传递， 当作数组首地址处理 数组的首地址是常量，是不可以被赋值的 指针类型是绝对不可以做加法 c语言中未经初始化的变量的值是不可知的 若二维数组a有m列,则在a[i][j]前的元素个数为( ) strcmp函数用于比较两个字符串是否相等，若s2与s1一样，则返回值为0，若s1&gt;s1返回大于0的数字 全局变量未经初始化默认赋值为0 函数返回值可以和普通值一样，可以出现表达式中，也可以作为函数实参，但不可以作为形参]]></content>
  </entry>
  <entry>
    <title><![CDATA[test of Markdown syntax]]></title>
    <url>%2F2017%2F03%2F14%2Ftest%2F</url>
    <content type="text"><![CDATA[title1title2title3out of order 1 2 order you and me this is a quotation notice the tifference Baidu You are good ! OK Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 ` #include&lt;stdio.h&gt; int main() { printf(&quot;Hello World !&quot;); return 0; }` END MENU Chinese Japan France]]></content>
  </entry>
  <entry>
    <title><![CDATA[Error in Hexo Learning]]></title>
    <url>%2F2017%2F03%2F13%2FErrors_hexo_Learning%2F</url>
    <content type="text"><![CDATA[一、关于 hexo d 出现以下问题的解决方法 遇到这个问题是这样解决的第一： 删除你hexo 下面的 .deploy_git 文件夹第二：运行1$ git config --global core.autocrlf false 第三： 重新123hexo cleanhexo githexo d 第四： 打开自己的网址，进行验证是否成功]]></content>
  </entry>
  <entry>
    <title><![CDATA[First Hexo]]></title>
    <url>%2F2017%2F03%2F13%2Fwhite-black%2F</url>
    <content type="text"><![CDATA[welcome to my hexo. Here I will give you something new! Quick Start]]></content>
  </entry>
  <entry>
    <title><![CDATA[GIT]]></title>
    <url>%2F2017%2F03%2F13%2FGit%2F</url>
    <content type="text"><![CDATA[2016.12 25初始化一个Git仓库，使用git init 命令1git init 添加文件到Git仓库，分两步： 第一步：使用命令 git add , 可以反复多次使用，添加多个文件； 第二步：使用名利 git commit -m “xxx” 提交完成。 xxx表示提示内容。12git add &lt;filename&gt;git commit -m "xxx" 查看当前工作区的状态，使用 git status 命令使用 git diff 告诉你修改的内容12git status git diff &lt;filename&gt; HEAD是指向当前版本的指针，HEAD^上一个版本、HEAD^^上上一个版本， 也可以用HEAD~100等。命令使用 git reset –hard commit_idgit log 可以查看历史， 以确定回到那个版本git reflog也可以查看历史]]></content>
  </entry>
  <entry>
    <title><![CDATA[VIM]]></title>
    <url>%2F2017%2F03%2F13%2Fvim%2F</url>
    <content type="text"><![CDATA[VI 是大多数Linux distributions 的内建 text editor, vi 主要有三种模式： 一般模式 normal 、编辑模式 Insert/replace 、指令模式 command mode ，而VIM 是vi 的升级版本，但具备VI 的所有功能， 也就是说VIM 比VI更强大。]]></content>
  </entry>
  <entry>
    <title><![CDATA[免费看 VIP 电影/电视剧]]></title>
    <url>%2F2017%2F03%2F13%2Ffree-watch-movies%2F</url>
    <content type="text"><![CDATA[作为学生党，我们实在是不愿意花钱去办一个 VIP 会员，那么我们想在各大主流视频平台（如优酷、乐视、奇异、芒果、搜狐、腾讯等）上看 VIP 电影和电视剧，有没有什么好的办法而且又不花钱呢？当然有了，这个方法是我在某平台上看到的，已经试过了，的确可以看 VIP 的电影、电视剧。 方法很简单：使用地址播放，首先我们需要播放地址，然后把我们想看的视频地址放在我给的播放地址后面就可以了；如下：（“=”前面播放地址，后面的是视频地址）1234http://jx.71ki.com/index.php?url=（视频网址URL格式）支持各大主流视频平台一线http://jx.71ki.com/index.php?url=（视频网址URL格式）只支持优酷、乐视、奇异、芒果、搜狐、腾讯VIP二线http://jx1.71ki.com/index.php?url=（视频网址URL格式）支持各大主流视频平台三线http://jx2.71ki.com/index.php?url=（视频网址URL格式）支持各大主流视频平台 以上的网址都可以播放相应的视频，文字只作为说明使用，使用时打开浏览器把相应的地址输入就可以了！]]></content>
  </entry>
  <entry>
    <title><![CDATA[用Github搭建Hexo博客]]></title>
    <url>%2F2017%2F03%2F13%2Fcreate-hexo%2F</url>
    <content type="text"><![CDATA[这是我搭建的Hexo博客，用于记录自己的学习，分享自己的想法、感悟。给自己的学习过程留下一些痕迹！希望对他人和自己都有所帮助，所以我决定把自己搭建Hexo的历程记录下来！ StartFirst Preparation安装Git : 下载mysysgit并执行即可完成安装。安装Node.js : 在Windows环境下安装Node.js,下载安装并执行即可。安装完打开（win+r）输入cmd后进入DOS命令输入:1node -v 检查环境变量是否自动配好，如果没有则需要手动配置环境变量。（具体操作百度就可以了） 安装Hexo 利用npm命令即可安装。（如果新建了链接在桌面上，直接打开 git bash 或者在任意位置鼠标右击选择git bash）,然后输入下面命令： 1npm install hexo-cli -g 创建 Hexo 文件夹在Git bash 中选择自己喜欢位置存放hexo文件夹 （如 E:\hexo），执行下面的命令就会在你选择的位置自动生成创建网站的所有文件。12hexo initnpm install 本地查看 到这里你就成功的在本地创建好 hexo 博客了。先在git bash 中切换到 hexo 文件夹，输入下面 两个命令，然后在任意浏览器输入本地地址 localhost: 4000 查看就可以了。12hexo g ( hexo generate)hexo s ( hexo server ) 注意：目前搭建的博客只是本地搭建，也就是说只有你本人能看到，其他人是不能看到的。那这就不符合我们搭建博客用于分享的目的了，别着急，接下来就要把我们的博客部署到 Github 上（前提是你要先在本地搭建好本地的博客哦！！！）]]></content>
  </entry>
  <entry>
    <title><![CDATA[C++学习随笔 setw( n )]]></title>
    <url>%2F2017%2F03%2F13%2Fc%2B%2Blearning%2F</url>
    <content type="text"><![CDATA[About the use of setw( int n )， First the setw() is included in the header comment #include, Setw means “set the width”,it’s usually right-aliged in the field of n spaces , you can type like this :1cout &lt;&lt; setw(25) &lt;&lt; "Hello World " &lt;&lt; endl; 1Hello World If you want to set the characters being left-aligned, you can use setiosflags(ios::left). Also, you may use setfill() to fill the blanks with “*” “@” and so on, let me give an example:12cout &lt;&lt; setw(25) &lt;&lt; setiosflags(ios::left) &lt;&lt; "Hello World " &lt;&lt; endl;cout &lt;&lt; setw(25) &lt;&lt; setiosflags(ios::left) &lt;&lt; setfill('*') &lt;&lt; "Hello World " &lt;&lt; endl; you will see12Hello WorldHello World************** Decomposing makes everything easier…(分解使一切变得更容易！) About a guessing gamme First Figure out how to generate a random number within a given range of values.1srand() rand() #include&lt;cstdlib.h&gt; #include&lt;ctime.h&gt; Second,Create a main function that processes one guess from the player, and provides hints Third,Add what we need to allow for multiple guesses until the player guesses the number.]]></content>
  </entry>
  <entry>
    <title><![CDATA[C++ 关于cin() 和 getline();]]></title>
    <url>%2F2017%2F03%2F13%2Fc%2B%2B_cin%2F</url>
    <content type="text"><![CDATA[cin &gt;&gt; 输入流遇到空格（space）会当作是输入结束的标志，例如下面的操作：1234string name;cout &lt;&lt; "Please input your name :" ;cin &gt;&gt; name;cout &lt;&lt; "Your name is " &lt;&lt; name &lt;&lt; endl; 当你在终端输入的的名字有空格时就不能完整的输出你的名字，输出情况如下:12Please input your name : Smith EdwardYour name is Smith 在这里我们可以清楚的看到，输出的结果与我们想要的结果不同，这是为什么呢？ 查相关资料我们会发现 cin 遇到空格时会当作是输入结束的标志， 所以在本例中只能输出 Smith 。 那么我们想完整的输出我们的名字时要要怎样处理，这里要介绍行输入函数getline(),用法如下：（定义还是用上面的定义，只是输入函数改为getline()）1getline( cin , name); 则输出的结果如下：12Please input your name : Smith EdwardYour name is Smith Edward 在这里我们可以看到，我们的名字可以完整的输出了，所以遇到要按行输出的时候我们可以使用 Getline() 函数]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F03%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
